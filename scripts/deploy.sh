#!/bin/bash

# Script de d√©ploiement Docker pour p0rt
set -e

# Configuration
COMPOSE_FILE="docker-compose.yml"
PROD_COMPOSE_FILE="docker-compose.prod.yml"
ENVIRONMENT=${1:-development}

echo "üöÄ D√©ploiement de p0rt en mode: $ENVIRONMENT"

# Fonctions utilitaires
check_requirements() {
    echo "üìã V√©rification des pr√©requis..."
    
    if ! command -v docker &> /dev/null; then
        echo "‚ùå Docker n'est pas install√©"
        exit 1
    fi
    
    if ! docker compose version &> /dev/null; then
        echo "‚ùå Docker Compose n'est pas disponible"
        echo "‚ÑπÔ∏è  Utilisez Docker Desktop ou installez le plugin docker-compose-plugin"
        exit 1
    fi
    
    echo "‚úÖ Pr√©requis OK"
}

setup_environment() {
    echo "üîß Configuration de l'environnement..."
    
    # Cr√©er .env si il n'existe pas
    if [ ! -f .env ]; then
        cp .env.example .env
        echo "üìù Fichier .env cr√©√© √† partir de .env.example"
        echo "‚ö†Ô∏è  Veuillez modifier .env avec vos param√®tres avant de continuer"
        read -p "Appuyez sur Entr√©e pour continuer..."
    fi
    
    # G√©n√©rer la cl√© SSH host si elle n'existe pas
    if [ ! -f ssh_host_key ]; then
        echo "üîë G√©n√©ration de la cl√© SSH host..."
        ssh-keygen -t rsa -b 4096 -f ssh_host_key -N "" -C "p0rt-host-key"
        chmod 600 ssh_host_key
        chmod 644 ssh_host_key.pub
    fi
    
    # Cr√©er les r√©pertoires n√©cessaires
    mkdir -p data/{security,reservations}
    mkdir -p ssl
    
    echo "‚úÖ Environnement configur√©"
}

deploy_development() {
    echo "üõ†Ô∏è  D√©ploiement en mode d√©veloppement..."
    
    # Construire et d√©marrer les services
    docker compose up --build -d
    
    echo "üìä √âtat des services:"
    docker compose ps
    
    echo ""
    echo "üåê Services disponibles:"
    echo "  - SSH: localhost:2222"
    echo "  - HTTP: http://localhost:8080"
    echo "  - Redis: localhost:6380"
    echo ""
    echo "üìù Commandes utiles:"
    echo "  - Logs: docker compose logs -f"
    echo "  - CLI: docker compose exec p0rt ./p0rt cli"
    echo "  - Arr√™t: docker compose down"
}

deploy_production() {
    echo "üè≠ D√©ploiement en mode production..."
    
    # V√©rifications de production
    if [ ! -f config.prod.yaml ]; then
        echo "‚ùå config.prod.yaml manquant"
        exit 1
    fi
    
    if [ ! -f ssh_host_key.prod ]; then
        echo "‚ùå ssh_host_key.prod manquant"
        exit 1
    fi
    
    # Construire et d√©marrer avec le compose de production
    docker compose -f $COMPOSE_FILE -f $PROD_COMPOSE_FILE up --build -d
    
    echo "üìä √âtat des services:"
    docker compose -f $COMPOSE_FILE -f $PROD_COMPOSE_FILE ps
    
    echo ""
    echo "üåê Services de production:"
    echo "  - SSH: port 22"
    echo "  - HTTP: port 80"
    echo "  - API: http://localhost/api/v1/status"
    echo ""
    echo "üìù Commandes utiles:"
    echo "  - Logs: docker compose -f $COMPOSE_FILE -f $PROD_COMPOSE_FILE logs -f"
    echo "  - Stats: docker compose -f $COMPOSE_FILE -f $PROD_COMPOSE_FILE exec p0rt ./p0rt stats"
    echo "  - S√©curit√©: docker compose -f $COMPOSE_FILE -f $PROD_COMPOSE_FILE exec p0rt ./p0rt security stats"
}

deploy_cloudflare() {
    echo "‚òÅÔ∏è  D√©ploiement avec Cloudflare..."
    echo "‚ÑπÔ∏è  Cloudflare g√®re SSL et le reverse proxy"
    
    # Utiliser la configuration production
    docker compose -f $COMPOSE_FILE -f $PROD_COMPOSE_FILE up --build -d
    
    echo "üåê Configuration Cloudflare requise:"
    echo "  1. Pointez votre domaine vers cette IP"
    echo "  2. Configurez Cloudflare en mode 'Full' ou 'Full (strict)'"
    echo "  3. Activez 'Always Use HTTPS'"
    echo ""
    echo "üìã Services expos√©s:"
    echo "  - SSH: port 22 (acc√®s direct)"
    echo "  - HTTP: port 80 (via Cloudflare)"
    echo "  - API: http://yourdomain.com/api/v1/status"
}

show_status() {
    echo "üìä √âtat actuel des services:"
    docker compose ps
    
    echo ""
    echo "üìà Statistiques des conteneurs:"
    docker stats --no-stream $(docker compose ps -q)
}

# Menu principal
case $ENVIRONMENT in
    "development"|"dev")
        check_requirements
        setup_environment
        deploy_development
        ;;
    "production"|"prod")
        check_requirements
        setup_environment
        deploy_production
        ;;
    "cloudflare"|"cf")
        check_requirements
        setup_environment
        deploy_cloudflare
        ;;
    "status")
        show_status
        ;;
    "stop")
        echo "üõë Arr√™t des services..."
        docker compose down
        ;;
    "clean")
        echo "üßπ Nettoyage complet..."
        docker compose down -v --rmi all
        docker system prune -f
        ;;
    *)
        echo "Usage: $0 {development|production|cloudflare|status|stop|clean}"
        echo ""
        echo "Modes disponibles:"
        echo "  development - D√©ploiement local (ports 2222, 8080)"
        echo "  production  - D√©ploiement production (ports 22, 80)"
        echo "  cloudflare  - D√©ploiement optimis√© pour Cloudflare"
        echo "  status      - Afficher l'√©tat des services"
        echo "  stop        - Arr√™ter tous les services"
        echo "  clean       - Nettoyage complet"
        exit 1
        ;;
esac